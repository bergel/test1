SystemOrganization addCategory: #'ACD-Model'!Object subclass: #ACDAnnouncerModel	instanceVariableNames: 'announcerContext announcement executingSubscriptionIndex activeSubscriptions'	classVariableNames: ''	poolDictionaries: ''	category: 'ACD-Model'!!ACDAnnouncerModel commentStamp: 'AndreiChis 2/19/2013 11:55' prior: 0!ACDAnnouncerModel models an executing announcer and its subscriptions.Instance Variables:	context	<BlockClosure | CascadeNode | ContextPart | DebugContext | Debugger | DynamixActivation | Exception | FAMIXInvocation | MessageNode | MessageSend | MooseQueryResult | RBCascadeNode | RBMessageNode | WeakMessageSend>	announcement	<ProtoObject>	currentSubscription	<OrderedCollection>	pendingSubscriptions	<OrderedCollection>	deliveredSubscriptions	<OrderedCollection>	idleSubscriptions	<OrderedCollection>!!ACDAnnouncerModel class methodsFor: 'instance creation' stamp: 'AndreiChis 2/19/2013 17:34'!forAnnouncerContext: announcerContext receiverContext: receiverContext		^ self new forAnnouncerContext: announcerContext receiverContext: receiverContext! !!ACDAnnouncerModel methodsFor: 'accessing' stamp: 'AndreiChis 7/8/2013 14:32'!activeSubscriptions	^ OrderedCollection new  		addAll: activeSubscriptions;		yourself	! !!ACDAnnouncerModel methodsFor: 'accessing' stamp: 'AndreiChis 2/27/2013 17:28'!announcement 	^ announcement ! !!ACDAnnouncerModel methodsFor: 'accessing' stamp: 'AndreiChis 2/14/2013 17:26'!announcer	^ self context receiver! !!ACDAnnouncerModel methodsFor: 'accessing' stamp: 'AndreiChis 7/8/2013 14:31'!context	^ announcerContext ! !!ACDAnnouncerModel methodsFor: 'accessing' stamp: 'AndreiChis 4/1/2013 20:16'!executingSubscription	^ activeSubscriptions at: executingSubscriptionIndex ! !!ACDAnnouncerModel methodsFor: 'initialization' stamp: 'AndreiChis 12/5/2013 13:29'!forAnnouncerContext: anAnnouncerContext receiverContext: aReceiverContext	|stackFilter|	self reset.		announcerContext := anAnnouncerContext.	stackFilter := self stackFilterFor: aReceiverContext.	(stackFilter locateAnnouncementDelivery) isNil ifTrue: [ ^ self ]. "aContext was not created as direct result of an announcemnt."			announcement := stackFilter extractAnnouncement.	executingSubscriptionIndex := stackFilter extractExecutingSubscriptionIndex. 	activeSubscriptions := Array withAll: stackFilter extractActiveSubscriptions.						! !!ACDAnnouncerModel methodsFor: 'testing' stamp: 'AndreiChis 4/1/2013 22:34'!hasMoreActiveSubscriptions	^ executingSubscriptionIndex < activeSubscriptions size! !!ACDAnnouncerModel methodsFor: 'testing' stamp: 'AndreiChis 7/16/2013 22:29'!hasSubscriptionExecuted: aSubscription	^ (self activeSubscriptions indexOf: aSubscription ifAbsent: [ 0 ]) < executingSubscriptionIndex ! !!ACDAnnouncerModel methodsFor: 'initialization' stamp: 'AndreiChis 8/30/2013 16:11'!reset	announcerContext := nil.	announcement := nil.	self resetSubscriptions.				! !!ACDAnnouncerModel methodsFor: 'initialization' stamp: 'AndreiChis 8/30/2013 16:07'!resetSubscriptions	executingSubscriptionIndex := 0.	activeSubscriptions := Array new.! !!ACDAnnouncerModel methodsFor: 'private' stamp: 'AndreiChis 7/12/2013 19:12'!stackFilterFor: aContext 	^ ACDContextLocator forContext: aContext ! !Object subclass: #ACDContextLocator	instanceVariableNames: 'context'	classVariableNames: ''	poolDictionaries: ''	category: 'ACD-Model'!!ACDContextLocator class methodsFor: 'as yet unclassified' stamp: 'AndreiChis 2/14/2013 18:34'!forContext: aContext	^ self new forContext: aContext! !!ACDContextLocator methodsFor: 'accessing actions' stamp: 'AndreiChis 12/5/2013 13:06'!extractActiveSubscriptions	^ context ifNotNilDo: [:aContext| aContext tempNamed: 'subs']! !!ACDContextLocator methodsFor: 'accessing actions' stamp: 'AndreiChis 12/5/2013 13:06'!extractAnnouncement	^ context ifNotNilDo: [:aContext| aContext tempNamed: 'anAnnouncement']! !!ACDContextLocator methodsFor: 'accessing actions' stamp: 'AlexandreBergel 9/28/2015 17:15'!extractExecutingSubscription	"This is a test"	"Another comment"	^ context ifNotNilDo: [:aContext|		(aContext tempNamed: 'subs') at: (aContext tempNamed: 'index')  ]! !!ACDContextLocator methodsFor: 'accessing actions' stamp: 'AlexandreBergel 9/28/2015 17:16'!extractExecutingSubscriptionIndex	"A test comment"	"another another"	^ context ifNotNilDo: [:aContext| aContext tempNamed: 'index' ]! !!ACDContextLocator methodsFor: 'private' stamp: 'AndreiChis 2/14/2013 18:40'!filterFailed	context := nil! !!ACDContextLocator methodsFor: 'private' stamp: 'AndreiChis 7/8/2013 15:47'!findContextSuchThat: testBlock	^ context 		ifNil: [ nil ] 		ifNotNil: [ context := context findContextSuchThat: testBlock ]	! !!ACDContextLocator methodsFor: 'initialization' stamp: 'AndreiChis 2/14/2013 18:35'!forContext: aContext	context := aContext ! !!ACDContextLocator methodsFor: 'actions' stamp: 'AndreiChis 7/12/2013 18:57'!locateAnnouncementDelivery	"Locate the context responsible with initiating the delivery of a subscription.	From this context the active subscriptions and the current executing subscription,	should be extracted."		^ self 		skipUntilSubscriptionDeliveryContext;		result! !!ACDContextLocator methodsFor: 'actions' stamp: 'AndreiChis 12/5/2013 13:21'!locateAnnouncerEntryPoint	"Locate the initial context that triggered the delivery of	a subscription. The initial context is the first that send 	the message announce:"	^ self 		skipAllInternalAnnouncerContexts;		skipAnnounceContexts;		result! !!ACDContextLocator methodsFor: 'accessing' stamp: 'AndreiChis 2/14/2013 18:41'!result	^ context! !!ACDContextLocator methodsFor: 'private' stamp: 'AndreiChis 2/21/2013 18:00'!sender	^ context isNil ifFalse: [ context := context sender ]! !!ACDContextLocator methodsFor: 'filtering actions' stamp: 'AndreiChis 7/8/2013 16:21'!skipAllInternalAnnouncerContexts	"Filter all contexts until the one that triggered the announcer is found."		self findContextSuchThat: [ :ctxt | 		(ctxt methodSelector = #announce:) and: [ 			ctxt methodClass = Announcer ] ]! !!ACDContextLocator methodsFor: 'filtering actions' stamp: 'AndreiChis 12/5/2013 13:24'!skipAnnounceContexts		self findContextSuchThat: [ :ctxt | 		(ctxt methodSelector = #announce:) and: [ 			ctxt sender methodSelector ~= #announce: ] ]! !!ACDContextLocator methodsFor: 'filtering actions' stamp: 'AndreiChis 7/12/2013 18:57'!skipUntilSubscriptionDeliveryContext	self findContextSuchThat: [ :aContext | 		aContext receiver class = SubscriptionRegistry and: [  			aContext selector =  #deliver:to:startingAt: and: [ 				aContext closure isNil ] ] ]! !!Object methodsFor: '*ACD-Model' stamp: 'AndreiChis 7/8/2013 09:39'!isSubscription	^ false! !DebugAction subclass: #ACDSenderCalleeAction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ACD-Model'!!ACDSenderCalleeAction class methodsFor: 'registration' stamp: 'AndreiChis 9/9/2013 09:47'!gtACDSenderActionFor: aDebugger	<gtACDSenderDebuggingAction>! !!ACDSenderCalleeAction methodsFor: 'accessing' stamp: 'AndreiChis 9/9/2013 09:39'!defaultIcon	^ GLMUIThemeExtraIcons glamorousRight! !!ACDSenderCalleeAction methodsFor: 'accessing' stamp: 'AndreiChis 9/9/2013 09:40'!defaultLabel	^ 'Next Context'! !!ACDSenderCalleeAction methodsFor: 'actions' stamp: 'AndreiChis 9/9/2013 09:51'!executeAction	self session updateSenderFrom: (self session process calleeOf:  self session senderContext) ! !DebugAction subclass: #ACDSenderCallerAction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ACD-Model'!!ACDSenderCallerAction class methodsFor: 'registration' stamp: 'AndreiChis 9/9/2013 09:11'!gtACDSenderActionFor: aDebugger	<gtACDSenderDebuggingAction>! !!ACDSenderCallerAction methodsFor: 'accessing' stamp: 'AndreiChis 9/9/2013 09:15'!defaultIcon	^ GLMUIThemeExtraIcons glamorousLeft! !!ACDSenderCallerAction methodsFor: 'accessing' stamp: 'AndreiChis 9/9/2013 09:13'!defaultLabel	^ 'Previous Context'! !!ACDSenderCallerAction methodsFor: 'actions' stamp: 'AndreiChis 9/9/2013 09:06'!executeAction	self session updateSenderFrom: self session senderContext sender! !DebugAction subclass: #ACDStepToNextSubscriptionDebugAction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ACD-Model'!!ACDStepToNextSubscriptionDebugAction class methodsFor: 'registration' stamp: 'AndreiChis 7/5/2013 14:34'!acdActionType	<gtACDSubscriptionDebuggingAction>! !!ACDStepToNextSubscriptionDebugAction methodsFor: 'testing' stamp: 'AndreiChis 7/4/2013 17:26'!appliesToContext: aContext	^ self session hasMoreActiveSubscriptions! !!ACDStepToNextSubscriptionDebugAction methodsFor: 'testing' stamp: 'AndreiChis 12/5/2013 13:28'!appliesToDebugger: aDebugger	^ aDebugger session hasMoreActiveSubscriptions! !!ACDStepToNextSubscriptionDebugAction methodsFor: 'actions' stamp: 'AndreiChis 1/20/2015 18:08'!executeAction 	"Step over the delivery of the current announcement."	| receiverSender |	receiverSender := self session receiverContext sender.		self session stepOver: receiverSender.	(self interruptedContext == receiverSender) 		ifFalse: [ self session contextChanged. ^ self ].		self session stepOver: (self session stackFilterFor: receiverSender) locateAnnouncementDelivery.	self session stepUntil: self nextDeliveryStart.				(self nextDeliveryStart matches: self interruptedContext) ifTrue: [ 		self session stepUntil: (self session subscriptionDelivery).		self session updateReceiver ]				! !!ACDStepToNextSubscriptionDebugAction methodsFor: 'initialization' stamp: 'AndreiChis 8/30/2013 17:09'!initialize	self label: 'Next subscription'.	self icon: GLMUIThemeExtraIcons glamorousOver.! !!ACDStepToNextSubscriptionDebugAction methodsFor: 'predicates' stamp: 'AndreiChis 1/20/2015 14:51'!nextDeliveryStart 	^ self session createPredicateForBlock: [ :aContext | 			aContext receiver isSubscription and: [  				aContext selector =  #deliver: and: [ 					aContext closure notNil ] ] ]! !DebugAction subclass: #ACDStepToSubscriptionDebugAction	instanceVariableNames: 'targetSubscription'	classVariableNames: ''	poolDictionaries: ''	category: 'ACD-Model'!!ACDStepToSubscriptionDebugAction class methodsFor: 'as yet unclassified' stamp: 'AndreiChis 9/9/2013 16:39'!acdActionTypeForDebugger: aDebugger	<gtContextACDSubscriptionDebuggingAction>		^ (self forDebugger: aDebugger)		targetSubscription: aDebugger selectedSubscription		! !!ACDStepToSubscriptionDebugAction methodsFor: 'testing' stamp: 'AndreiChis 9/9/2013 16:39'!appliesToContext: aContext	^ (self session hasSubscriptionExecuted: targetSubscription) not! !!ACDStepToSubscriptionDebugAction methodsFor: 'accessing' stamp: 'AndreiChis 9/9/2013 16:34'!defaultLabel	^ 'Step to subscription'! !!ACDStepToSubscriptionDebugAction methodsFor: 'actions' stamp: 'AndreiChis 1/20/2015 18:38'!executeAction 	| receiverSender |	receiverSender := self session receiverContext sender.				[ self interruptedContext receiver == targetSubscription  ] 		whileFalse: [ 			self session stepOver: receiverSender.			(self interruptedContext == receiverSender) 				ifFalse: [ self session contextChanged. ^ self ].						self session stepOver: (self session stackFilterFor: receiverSender) locateAnnouncementDelivery.			self session stepUntil: self nextDeliveryStart.			receiverSender := self interruptedContext ].			(self nextDeliveryStart matches: self interruptedContext) 		ifTrue: [ 			self session stepUntil: (self session subscriptionDelivery).			self session updateReceiver ]! !!ACDStepToSubscriptionDebugAction methodsFor: 'predicates' stamp: 'AndreiChis 1/20/2015 11:59'!nextDeliveryStart 	^ self session createPredicateForBlock: [ :aContext | 			aContext receiver isSubscription and: [  				aContext selector =  #deliver: and: [ 					aContext closure notNil ] ] ]! !!ACDStepToSubscriptionDebugAction methodsFor: 'accessing' stamp: 'AndreiChis 9/9/2013 16:39'!targetSubscription: aSubscription	targetSubscription := aSubscription! !!Announcement class methodsFor: '*ACD-Model' stamp: 'AndreiChis 1/29/2013 14:48'!announcementType	^ self! !!Announcement methodsFor: '*ACD-Model' stamp: 'AndreiChis 1/29/2013 14:49'!announcementType	^ self class announcementType! !DebugSession subclass: #ACDDebugSession	instanceVariableNames: 'senderContext announcerModel receiverContext'	classVariableNames: ''	poolDictionaries: ''	category: 'ACD-Model'!!ACDDebugSession class methodsFor: 'accessing' stamp: 'AndreiChis 7/12/2013 19:12'!stackFilterFor: aContext 	^ ACDContextLocator forContext: aContext ! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 7/8/2013 14:33'!activeSubscriptions	^ announcerModel activeSubscriptions! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 2/27/2013 17:28'!announcement	^ announcerModel announcement ! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 8/30/2013 16:37'!announcementLoopContext		^ (self stackFilterFor: receiverContext) locateAnnouncementDelivery! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 2/27/2013 17:35'!announcer	^ announcerModel announcer! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 2/28/2013 14:14'!announcerContext	^ announcerModel context! !!ACDDebugSession methodsFor: 'predicates creation' stamp: 'AndreiChis 8/20/2013 16:55'!createStepPredicateForPredicate: aPredicate	^ self createStepPredicateForPredicate: aPredicate fromContext: self announcerContext! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 2/19/2013 17:42'!executingSubscription	^ announcerModel executingSubscription ! !!ACDDebugSession methodsFor: 'testing' stamp: 'AndreiChis 4/1/2013 22:34'!hasMoreActiveSubscriptions	^ announcerModel hasMoreActiveSubscriptions! !!ACDDebugSession methodsFor: 'testing' stamp: 'AndreiChis 7/16/2013 22:28'!hasSubscriptionExecuted: aSubscription	^ announcerModel hasSubscriptionExecuted: aSubscription! !!ACDDebugSession methodsFor: 'initialization' stamp: 'AndreiChis 2/19/2013 17:32'!initializeSenderContext: aSenderContext announcerContext: anAnnouncerContext receiverContext: aReceiverContext	senderContext := aSenderContext.	announcerModel := ACDAnnouncerModel forAnnouncerContext: anAnnouncerContext receiverContext: aReceiverContext.	receiverContext := aReceiverContext ! !!ACDDebugSession methodsFor: 'initialization' stamp: 'AndreiChis 8/30/2013 15:56'!process: aProcess context: aContext	| announcerContext |	super process: aProcess context: aContext.		announcerContext := (ACDContextLocator forContext: aContext sender) locateAnnouncerEntryPoint.	self 		initializeSenderContext: announcerContext sender 		announcerContext: announcerContext 		receiverContext: aContext	! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 2/28/2013 14:44'!receiver	^ receiverContext receiver ! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 2/28/2013 14:44'!receiverContext	^ receiverContext! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 2/28/2013 14:14'!sender	^ senderContext receiver! !!ACDDebugSession methodsFor: 'accessing' stamp: 'AndreiChis 4/1/2013 17:49'!senderContext	^ senderContext! !!ACDDebugSession methodsFor: 'private' stamp: 'AndreiChis 3/26/2013 12:30'!stackFilterFor: aContext 	^ self class stackFilterFor: aContext ! !!ACDDebugSession methodsFor: 'debugging actions' stamp: 'AndreiChis 8/30/2013 16:27'!stepUntil: aPredicate	^ self stepUntil: aPredicate from: self interruptedContext.! !!ACDDebugSession methodsFor: 'debugging actions' stamp: 'AndreiChis 1/20/2015 18:55'!stepUntil: aPredicate from: aContext 		self process stepUntil: (self createStepPredicateForPredicate: aPredicate) from: aContext.	self  		updateWithContext: (self stepToFirstInterestingBytecodeIn: self process) 		fromProcess: self process.! !!ACDDebugSession methodsFor: 'predicates' stamp: 'AndreiChis 8/30/2013 17:11'!subscriptionDelivery 	| aSubscription |	aSubscription := self interruptedContext receiver.	^ self createPredicateForBlock: [ :aContext |  			aContext receiver == aSubscription subscriber and: [				aContext method selector = aSubscription action selector] ].! !!ACDDebugSession methodsFor: 'predicates' stamp: 'AndreiChis 8/30/2013 17:11'!subscriptionDeliveryFor: aSubscription.		^ self createPredicateForBlock: [ :aContext |  			aContext receiver == aSubscription subscriber and: [				aContext method selector = aSubscription action selector] ].! !!ACDDebugSession methodsFor: 'updating' stamp: 'AndreiChis 2/27/2013 11:53'!updateFromReceiverContext: aContext	|announcerContext|	announcerContext := (self stackFilterFor: aContext sender) locateAnnouncerEntryPoint.	self initializeSenderContext: announcerContext sender announcerContext: announcerContext receiverContext: aContext! !!ACDDebugSession methodsFor: 'updating' stamp: 'AndreiChis 8/30/2013 16:29'!updateReceiver		^ self updateFromReceiverContext: self interruptedContext! !!ACDDebugSession methodsFor: 'updating' stamp: 'AndreiChis 9/9/2013 09:37'!updateSenderFrom: aContext	senderContext := aContext! !!AnnouncementSubscription methodsFor: '*ACD-Model' stamp: 'AndreiChis 7/8/2013 09:40'!isSubscription	^ true! !!WeakAnnouncementSubscription methodsFor: '*ACD-Model' stamp: 'AndreiChis 7/8/2013 09:40'!isSubscription	^ true! !!SubscriptionRegistry methodsFor: '*ACD-Model' stamp: 'AndreiChis 2/13/2013 19:18'!acdSubscriptions	|subsCopy|		self protected: [ subsCopy := subscriptions as: OrderedCollection ].		^ subsCopy! !WhereIsDebugAction subclass: #ACDSenderWhereIsDebugAction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ACD-Model'!!ACDSenderWhereIsDebugAction class methodsFor: 'registration' stamp: 'AndreiChis 12/6/2013 18:03'!gtActionFor: aDebugger	<gtACDSenderDebuggingAction>		^ (self forDebugger: aDebugger)			icon: GLMUIThemeExtraIcons glamorousSearch! !!ACDSenderWhereIsDebugAction methodsFor: 'actions' stamp: 'AndreiChis 12/6/2013 18:01'!executeAction	self debugger updateSenderCodeSelection! !!ACDSenderWhereIsDebugAction methodsFor: 'accessing' stamp: 'AndreiChis 12/6/2013 18:01'!id	^ #acdSenderWhereIs! !